package polinom;

public class MonomInt extends Monom implements Comparable{
	Integer coeff;
	Integer grad;
	
	/**
    *
    * MonomReal constructor
    *
    * @param coeff Integer variable for the coefficient of the monom 
    * @param grad Integer variable for the grad of the monom
    * @see MonomInt
    */
	protected MonomInt(Integer coeff, Integer grad) {
		this.coeff = coeff;
		this.grad = grad;
	}
	
	/**
    *
    * coefficient getter
    *
    * @return coefficient
    * @see MonomInt
    */
	public Integer getCoeff() {
		return coeff;
	}

	/**
    *
    * coefficient setter
    *
    * @param coeff Integer variable for the monom's coefficient
    * @see MonomInt
    */
	public void setCoeff(Integer coeff) {
		this.coeff = coeff;
	}

	/**
    *
    * grad getter
    *
    * @return grad
    * @see MonomInt
    */
	public Integer getGrad() {
		return grad;
	}

	/**
    *
    * grad setter
    *
    * @param grad Integer variable for the monom's grad
    * @see MonomInt
    */
	public void setGrad(Integer grad) {
		this.grad = grad;
	}
	
	/**
    *
    * The method adds two monom's coefficients, and returns the resulting monom
    *
    * @param m Monom
    * @return the result MonomInt
    * @see MonomInt
    */
	@Override
	protected Monom add(Monom m) {
		MonomInt mr = (MonomInt) m;
		mr.setCoeff(this.coeff + mr.coeff);
		return mr;
	}

	/**
    *
    * The method subtracts two monom's coefficients, and returns the resulting monom
    *
    * @param m Monom
    * @return the result MonomInt
    * @see MonomInt
    */
	@Override
	protected Monom subtract(Monom m) {
		MonomInt mr = (MonomInt) m;
		mr.setCoeff(this.coeff - mr.coeff);
		return mr;
	}
	
	/**
    *
    * The method multiplies two monom's coefficients, and returns the resulting monom
    *
    * @param m Monom
    * @return the result MonomInt
    * @see MonomInt
    */
	@Override
	protected Monom multiply(Monom m) {
		MonomInt mr = (MonomInt) m;
		mr.setCoeff(this.coeff * mr.coeff);
		return mr;
	}
	
	/**
    *
    * The method divides two monom's coefficients, and returns the resulting monom
    *
    * @param m Monom
    * @return the result MonomInt
    * @see MonomInt
    */
	@Override
	protected Monom divide(Monom m) {
		MonomReal mr = (MonomReal) m;
		mr.setCoeff((Double) (this.coeff / mr.coeff));
		return mr;
	}
	
	/**
    *
    * The method differentiates the current monom and returns it
    *
    * @return the result MonomReal
    * @see MonomInt
    */
	@Override
	protected Monom differentiate() {
		this.coeff *= this.grad;
		this.grad --;
		return this;
	}
	
	/**
    *
    * The method integrates the current monom and returns it
    *
    * @return the result MonomReal
    * @see MonomInt
    */
	@Override
	protected Monom integrate() {
		MonomReal mr = new MonomReal(this.coeff / (Double) (++ this.grad).doubleValue(), ++ this.grad);
		return mr;
	}
	
	/**
    *
    * The method compares the monoms based on their grads
    *
    * @return the result in int
    * @see MonomInt
    */
	@Override
	public int compareTo(Object o) {
		return this.grad.compareTo(((MonomInt) o).getGrad());
	}
}
