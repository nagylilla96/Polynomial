/**
 * Polinom class
 * The class is for polinoms 
 *
 * @author Nagy Lilla
 * @version 10 Mar 2017
 */

package polinom;

import java.util.*;

public class Polinom{
	List<Monom> monoms = new LinkedList<>();

	/**
	 *
	 * Polinom constructor which calls super()
	 *
	 * @see Polinom
	 */
	protected Polinom() {
		super();
	}

	/**
	 *
	 * Adds a new monom to the set of monoms from the Polinom
	 *
	 * @param m Monom
	 * @return Polinom
	 * @see Polinom
	 */
	protected Polinom addMonom(Monom m) {
		this.monoms.add(m);
		this.monoms.sort((s1, s2) -> -Integer.compare((int) s1.getGrad(), (int) s2.getGrad()));
		return this;
	}

	/**
	 *
	 * Gets the set of monoms from the Polinom
	 *
	 * @return Set<Monom> the set of monoms
	 * @see Polinom
	 */
	public List<Monom> getMonoms() {
		return this.monoms;
	}

	/**
	 *
	 * Sets the set of monoms of the Polinom
	 *
	 * @param monoms of Set<Monom> type
	 * @see Polinom
	 */
	public void setMonoms(List<Monom> monoms) {
		this.monoms = monoms;
	}


	/**
	 *
	 * Adds two polynomials, and finds the monoms with the same grad
	 *
	 * @param p Polinom
	 * @return Polinom
	 * @see Polinom
	 */
	protected Polinom addPolinom(Polinom p) {
		Polinom res = new Polinom();
		List<Monom> monomList;
		Iterator<Monom> j;
		Monom mon;
		if (((Integer) this.monoms.get(0).getGrad()).compareTo((Integer) p.getMonoms().get(0).getGrad()) > 0) {
			monomList = this.monoms;
			j = p.getMonoms().iterator();
			if (j.hasNext()) {
				mon = j.next();
			}
			else return this;
		}
		else {
			monomList = p.getMonoms();
			j = this.monoms.iterator();
			if (j.hasNext()) {
				mon = j.next();
			}
			else return p;
		}
		for (Monom i: monomList) {
			while (((Integer) mon.getGrad()).compareTo((Integer) i.getGrad()) > 0 && j.hasNext()) {
				res.addMonom(mon);
				mon = j.next();
			}
			if (i.getGrad().equals(mon.getGrad())) {
				res.addMonom(i.add(mon));
				if (j.hasNext()) {
					mon = j.next();
				}
			}
			else {
				res.addMonom(i);

			}
		}
		return res;
	}

}
